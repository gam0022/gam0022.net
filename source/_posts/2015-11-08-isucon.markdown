---
layout: post
title: "ISUCON5本選に参加して、無力さを思い知った"
date: 2015-11-08 18:21
comments: true
categories:
---

ISUCON5の本戦に @methane さん、@koki_cheese さん、私(@gam0022)の3人で、チーム名 lily white として参加しました。
結果は fail (サーバの再起動のテストで失格してスコア無し)でした。

最初に断っておくと、自分はインフラもパフォーマンスチューニングも経験が全く無く、
本来であれば本戦出場は絶対に不可能な実力しかありまんでした。

本戦まで連れていってくださったチームのみなさんには本当に感謝しています。

攻略に関する有益な情報については既にたくさんのブログのエントリーがあると思うので、
素人がどうやって練習したのかを中心にして振り返りと反省を書こうかと思います。
ほとんどの内容は個人的なメモのようなものなので、読んでもそこまで価値は無いと思います。
さらに、予選+本戦の振り返りなので、内容が無いわりに長文です。すみません。

lily white チームのやったことの詳細については、@methane さんのブログを参照してください。

- [ISUCON5 予選通過しました (@methane編)](http://dsas.blog.klab.org/archives/isucon5-qual-methane.html)
- [ISUCON 5 決勝戦で負けてきました](http://dsas.blog.klab.org/archives/isucon5-final.html)

<!--more-->

# きっかけ

まずはISUCONに参加するに至ったきっかけについてです。
会社の先輩でスーパーエンジニアの @methane さんがISUCONに興味のある新人を募集していたので、
インフラやパフォーマンス・チューニングを学習する良い機会になりそうだと考えて、参加を決意しました。

さらに、大学生の @koki_cheese さん ISUCON メンバーを募集していたので、
@methane さんがチームに引き入れ、この3人のチームとなりました。

インフラもパフォーマンスチューニングも経験が全く無かった私と @koki_cheese さんは、
リーダの @methane さんにアドバイスを貰いながら、練習と対策を行っていきました。

# 予選

まずは予選のことについて振り返ってみます。

## 予選の練習

ISUCON参加チームには1年間有効な100ドル分のGoogle Cloud Platform(GCP)クーポンがされており、
予選はGCPというアナウンスがあったため、GCPの環境を使って練習しました。

去年のISUCON4の予選はAWS上で行われましたが、
ISUCON運営チームが気を利かせて、練習のためのISUCON4の予選の[GCPのイメージ](http://isucon.net/archives/45253058.html#5_1)を配布していました。

ISUCON4の予選はのお題は「いすこん銀行」というログイン機能だけの非常にシンプルなWebアプリでした。
この問題では、@methane さんにプロファイリングの方法などを教わりながら、次のような練習をしました。

- GCP自体の使い方の練習
- [myprofiler](https://github.com/KLab/myprofiler) というMySQLのプロファイラを使う
- dstat というリソース状況を見るためのツールでプロファイリングする
- top コマンドによるプロファイリング
- （strace/pprof についても教えてもらっていたが、これらは練習が間に合わなかった）
- @methane さんが自作した、Nginxのログを集計して、ページごとのレスポンスや通信量を調べるツールを使う
- Go言語のアプリとMySQLをTCPではなく、UNIXドメインソケットで繋ぐ
- Nginxで静的ファイルを返す設定をする
- DBのオンメモリ作戦にチャレンジする(自分の実装力が低すぎてハマったので、当日はこの作戦は辞めようと思った）

また、チームとしてGoを選択することは決まっていたのに、私はGoが全くの未経験だったので、
[A Tour of Go](http://go-tour-jp.appspot.com/#1)を一通り目を通してGoに慣れておきました。

## 予選の当日

ISUCON5の予選のお題は「ISUXI」という某SNS風のアプリでした。
そして、SQLのチューニングだけでもギリギリ予選突破できるような問題となっていました。

ISUCONは基本的にはチーム戦ですが、私たちのチームでは個人でそれぞれチューニングを行なって、
一番高いスコアが出たインスタンスを提出するという作戦でした。

結果的に @methane さん1人の力で予選を突破する形となりました。

なお、自分のベストスコアは2000程度で、予選通過ボーダーラインの13898を大きく下回っていました。
予選中に自分がやったことをまずは振り返ります。

### ボトルネックの調査

まず、myprofiler でクエリをプロファイリングしたところ、`relations`というテーブルが何度も参照されていることが分かりました。

また、`entries`と`comments`というテーブルでは、body というカラムの1行目がタイトルとなっていて、
アプリ側で1行目を取り出して、2行目以降は捨てるような処理となっており、
かなり無駄な FETCH が発生していることが分かりました。

そして、いくつかのテンプレートで、`users`テーブルをSELECTしていて、
いわゆる「N+1」問題になっているというところまでは分かりました。

### 対策

まず最初は、Go言語のアプリとMySQLをTCPではなく、UNIXドメインソケットで繋ぐところをやりました。

body カラムの問題については、対応が大変そうだったので、後回しにしました。

予選マニュアルをよく読むと、
「ユーザはすべてメールアドレスとパスワードでログインしますが、データベースにデフォルトで登録されているユーザは全て、パスワードはアカウント名と同じです。」
とあり、追加分のユーザのデータについてもこのルールを満たしていることが分かったので、
初期実装のSALTの計算などを消して、メールアドレスのアカウント名だけを切り出して、パスワードとの単純な文字列の一致で行うようにしました。

この変更を加えた後もベンチマークは正常にパスしましたが、結果的にはこの変更は悪手でした。
ログインの処理はベンチマーク中で数回しか行われおらず、
スコア的には誤差くらいの意味しか無かったので、他のことに時間を使ったほうが有意義でした。

この後は、ずっとSQLチューニングをしていました。
INDEXを貼ったり消してEXPLAIN結果の変化を見たり、地道に「N+1」になっている箇所を潰したりしました。

`ralations`というテーブルが`user`同士の友達関係を保持しており、
`isFriend()`という関数でユーザ同士の友達関係のチェックをするために、次のSQLのクエリを使っていました。

```sql
SELECT COUNT(1) AS cnt FROM relations WHERE (one = ? AND another = ?) OR (one = ? AND another = ?)
```

このアプリでは友達関係は両方向で、
初期データセット全ての`relations`のレコードについて、
one と another を入れ替えた対応するレコードが存在していそうなことを確認して、次のように書き換えました。

```sql
SELECT COUNT(1) AS cnt FROM relations WHERE (one = ? AND another = ?)
```

元のクエリでもそこまで重いわけではないですが、`isFriend()`はものすごい回数呼ばれていたので、それなりに効果がありました。

友達の人数を取得するために友達の`uesrs`を全件FETCHしてGo側で配列の要素数を数えているのを、SQLの`COUNT`で置き換えるなどしました。

ここまですると、友だちの最新の日記エントリ10件を返す部分がボトルネックになってきました。
最初の実装だと、最新のエントリ1000件を全件取得して、上の`isFriend()`を呼んで友達のエントリーだけをフィルターしていました。
そのため、`isFriend()`が大量に呼ばれていたわけですね。
ここが最大のボトルネックなのは察したので、残りの全ての時間をかけてここを潰す作戦にしました。

このようなケースだったら、IN句を使うことで友達の`user_id`でフィルターできるという知識くらいはかろうじてありました。
単純にIN句の中にサブクエリを書くように書き換えたところ、スコアが大きく下がりました。
適当に書いたサブクエリがうまく最適化されていないのが原因でした。

サブクエリの部分を別のSQLで取ってくるか、`EXISTS`や`INNER JOIN`で置き換えれば良かったのですが、
予選時にはそれらの知識が無かったので、間違った方向に試行錯誤して、時間切れになりました。

そして、2000程度の予選通過ボーダーラインを大きく下回るしょぼいスコアでフィニッシュしました。

# 本戦

本戦について振り返ります。

## 本戦の練習

本戦の役割分担としては、環境設定などの下回り的な部分、オペレーション、MySQLのクエリチューニング、
リグレッションテストをすることになったので、これらを中心に練習しました。

### 予選のリベンジ

とても予選が悔しかったので、[MySQLのクエリチューニングとインフラの設定だけで予選ボーダーを超える練習](https://github.com/gam0022/isucon5q-retry)をしました。
本当に基本的なSQLチューニングしかできませんでしたが、
最終的には17000くらいスコアが出て、なんとか予選のボーダーは超えました。

#### クエリチューニング
例の友だちの日記エントリは、[SQLを速くするぞ](http://www.geocities.jp/mickindex/database/db_optimize.html)という記事を参考にして、
`IN句`ではなく、`EXIST句`に置き換えたところ、サブクエリが最適化されるようになりました。
さらに `INNER JOIN` に置き換えてみましたが、これはあまり効果がありませんでした。

全く同じような方法で、最新の友達のコメント10件も`EXISTS`に置き換えると、10000点は超えるようになりました。

[MySQLのEXPLAINを徹底解説!!](http://nippondanji.blogspot.jp/2009/03/mysqlexplain.html)などでクエリチューニングやMySQLのプロファイリングを予習しておきました。

あまりネタバレを見ないでリベンジしていたのですが、足あとに関しては自分では良い対策が考えつかず、
[公式の解説](http://isucon.net/archives/45627361.html)の鮮やかなREPLACEとテーブルの置き換えをそのまま行いました。

body カラムの問題については、`entries.body` の1行目を `entries.title` に入れるスキーマの変更をしました。
あとはクエリを適正に書き換えることで、body の無駄な FETCH が減らすことができます。

```sql
ALTER TABLE entries ADD COLUMN ( title VARCHAR(80) );
UPDATE entries SET title = SUBSTRING_INDEX(body,"\n",1);
```

#### 圧縮テーブル

今回はDBのサイズが巨大でメモリに載りきらないので、圧縮テーブルを試しました。
まずは、`my.cnf` で ファイルフォーマットを Barracuda にして、

```sql
[mysqld]
innodb_file_format = Barracuda
```

クラアントでこうすると、既存テーブルも圧縮テーブルにできます。意外と簡単です。

```sql
ALTER TABLE entries row_format = compressed;
```

#### ウォームアップ

正しいウォームアップ方法が分からないのですが、`innodb_buffer_pool_dump` を有効にするだけでもそれなりに効果がありました。

```sql
innodb_buffer_pool_dump_at_shutdown = 1
innodb_buffer_pool_load_at_startup = 1
```

その他にも、`my.cnf`の読みこまれる順序や、設定ファイルの基本的なパラメータの勉強、
スキーマの変更のためのALTER系のクエリの使い方などを一通り予習しておきました。

### リグレッションテスト

予選ではベンチマークのキューの待ち時間が長いため、気軽にテストをできる状況では無かったです。
そのため、簡易的なリグレッションテストをしようということになりました。

[gor](https://github.com/buger/gor)というツールを使うと、
ヘッダーなどを含めてHTTPのリクエストをキャプチャできるので、
この結果を見ながら[簡易的なリグレッションテスト](https://github.com/gam0022/isucon5q-regtest)を行うRubyのスクリプトを書く練習などをしました。

### オペレーション

sshの環境設定、DBや設定のバックアップ、プロファイリング用のログを取るなどの最低限の練習はしました。

気休め程度に、当日の環境構築のチートシートは用意しておきました。

あとは、nginxの再起動無しにログファイルを別のファイルに退避するコマンドなどを用意して、
プロファイリング用のコマンドを当日コピーすればすぐ使えるように、ビルド済のバイナルファイルをまとめておきました。

## 本戦の当日

本戦のテーマはマイクロサービスとなっていて、
外部APIにリクエストを送り、その結果をまとめてユーザに返す「AirISU」というサービスでした。

スコアを上げるためには、APIへのリクエストを並列化したり、適切にレスポンスをキャッシュする必要がありました。
このあたりのチームの攻略方法については、@methane さんの[記事](http://dsas.blog.klab.org/archives/isucon5-final.html)に詳細があります。

自分は上のAPIの通信周りについてはノータッチだったので、多くは語りません。
代わりに、自分が実際に当日やったことの反省について書きます。

本戦ではマシンが3台構成で、初期状態ではパスワード認証だけができる状態でした。
打ち合わせ通りにまずはsshの環境設定を行いました。
事前に他の2人の公開鍵を預かっておいたので準備万端なつもりだったのですが、
ローカルから各マシンにはsshできるのに、マシン同士のsshができない理由が分からずに時間を無駄にしました。
@koki_cheese さんがすぐに見つけれくれましたが、`/etc/hosts.deny`が原因でした。
最終的には`/etc/hosts.allow`を`sshd: ALL`に書き変えて対処しました。
基本的な設定だったことに加え、適切に調べればすぐに分かるような問題だっただけに情けなかったです。

予定では、プロファイリングやGoへのアプリの実装の切り替え・初回ベンチ・プロファイリング用のログの取得は自分の役割だったのですが、
上記のsshの設定で時間を無駄にしている間に、他の2人が代わりにやってくれました。

その後は、設定ファイルをバージョン管理したり、
ログインシェルが sh だったので、bash に切り替えたり、
事前に用意したコマンドをサーバに配置してパスを通したり、
リーダの指示に従って、nginx 周りの設定を行なっていました。

nginxでの静的ファイルの配信は予選でもやっていたので良かったのですが、
gzip_static の設定は gzip コマンドの `-k` オプションを知らずに時間を無駄にしてしまいました。

他にも、`include mime.types;`を追加したところ、nginx が再起動しなくなってしまい、
service コマンド経由で再起動するとエラーメッセージが標準出力されずに時間を無駄にしました。
冷静に考えるとnginxのログファイルを先に見れば一瞬だったので、頭が悪すぎました。

このような初歩的な知識が無かったり、エラーログを読むなどの基本的なトラブルシューティングができずに、
チームには迷惑をかけてしまいました。

MySQL のクエリチューニングの練習を一番練習していたのですが、本戦は MySQL ではなく postgress でした。
しかも、クエリは非常に単純で、データ量も少ないのでボトルネックでは無さそうでした。
2人がDBのオンメモリ化を進めていたので、結局DBのチューニングはスルーしました。
一応、`pg_dump` で初期データとスキーマのバックアップはとっておきましたが、最後まで使いませんでした。
後から考えると、もう少しスキーマをじっくりと眺めて、インデックスだけでも適切に貼っていたりすれば、
初動のスコアなら少しは貢献できたかもしれなかったです。

リグレッションテストについても、一部のレスポンスが外部APIに依存していてベンチマーク毎に結果が変わってしまうこと、
予選よりもキューに空きがあってベンチマークを投げやすかったことなどがあって、
リグレッションテスト自体の必要性が薄れてしまったので、作りかけで破棄しました。

# まとめ

事前の練習の知識が活かせなかった上に、初歩的なトラブルで時間を無駄にしてチームに迷惑をかけてしまいました。
完全に自分の能力不足だったので、言い訳の余地は無いと思っています。

結果的には、不完全燃焼でしたが、インフラやパフォーマンスチューニングを勉強する良いきっかけになったと思います。
また、社内のすごい先輩に直々に指導してもらったり、ISUCON本戦に出場するなどの貴重な機会を得ることができました。
さらに、@koki_cheese さんなど、面白い学生に会えて良い刺激（焦り）を得ることができました。

また、ISUCONの運営チームの方々にも深く感謝します。
問題の作成やインフラの提供に加えて、
GCPの無料クーポンの配布、過去の問題のイメージの準備など、練習の環境までサポートしてくださる気遣いには驚きました。

最後に、来年もISUCONがあるとすれば、またリベンジするつもりです。
来年までには、自分の力で予選突破できる程度までには、頑張って実力を付けたいです。
